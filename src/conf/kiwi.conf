# Copyright (c) 2024-present, arana-db Community.  All rights reserved.
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Kiwi Configuration File
# 
# Kiwi is a Redis-compatible NoSQL database built with Rust, RocksDB, and Raft protocol.
# This configuration file uses Redis-style format with comprehensive comments.
#
# Note that in order to read the configuration file, Kiwi must be
# started with the file path as first argument:
#
# ./kiwi-server /path/to/config.ini

# Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
#
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.

################################## NETWORK #####################################

# Accept connections on the specified port, default is 1430.
# If port 0 is specified Kiwi will not listen on a TCP socket.
port 1430

# Bind to specific network interfaces. By default, Kiwi listens for connections
# from all available network interfaces on the host machine.
# bind 127.0.0.1 -::1

# Close the connection after a client is idle for N seconds (0 to disable)
# timeout 0

# TCP keepalive.
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence
# of communication. This is useful for two reasons:
# 1) Detect dead peers.
# 2) Force network equipment in the middle to consider the connection to be alive.
# tcp-keepalive 300

################################## GENERAL #####################################

# By default Kiwi does not run as a daemon. Use 'yes' if you need it.
# daemonize no

# Specify the server verbosity level.
# This can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
# nothing (nothing is logged)
# loglevel notice

# Specify the log file name. Also the empty string can be used to force
# Kiwi to log on the standard output.
# logfile ""

# Set the number of databases. The default database is DB 0, you can select
# a different one on a per-connection basis using SELECT <dbid> where
# dbid is a number between 0 and 'databases'-1
# databases 16

############################## MEMORY MANAGEMENT ################################

# Set a memory usage limit to the specified amount of bytes.
# When the memory limit is reached Kiwi will try to remove keys
# according to the eviction policy selected.
memory 10M

# MAXMEMORY POLICY: how Kiwi will select what to remove when maxmemory
# is reached. You can select one from the following behaviors:
# volatile-lru -> Evict using approximated LRU, only keys with an expire set.
# allkeys-lru -> Evict any key using approximated LRU.
# volatile-lfu -> Evict using approximated LFU, only keys with an expire set.
# allkeys-lfu -> Evict any key using approximated LFU.
# volatile-random -> Remove a random key having an expire set.
# allkeys-random -> Remove a random key, any key.
# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)
# noeviction -> Don't evict anything, just return an error on write operations.
# maxmemory-policy noeviction

################################ SNAPSHOTTING  ################################

# Save the DB to disk.
# save <seconds> <changes> [<seconds> <changes> ...]
# Kiwi will save the DB if the given number of seconds elapsed and it
# surpassed the given number of write operations against the DB.
# save 3600 1 300 100 60 10000

# The filename where to dump the DB
# dbfilename dump.rdb

# The working directory.
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
# dir ./

################################# REPLICATION #################################

# Master-Replica replication. Use replicaof to make a Kiwi instance a copy of
# another Kiwi server.
# replicaof <masterip> <masterport>

# If the master is password protected (using the "requirepass" configuration
# directive below) it is possible to tell the replica to authenticate before
# starting the replication synchronization process.
# masterauth <master-password>

################################## SECURITY ###################################

# Warning: since Kiwi is pretty fast, an outside user can try up to
# 1 million passwords per second against a modern box. This means that you
# should use very strong passwords, otherwise they will be very easy to break.
# requirepass foobared

################################### CLIENTS ####################################

# Set the max number of connected clients at the same time. By default
# this limit is set to 10000 clients.
# maxclients 10000

############################### ADVANCED CONFIG ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
# hash-max-listpack-entries 512
# hash-max-listpack-value 64

# Lists are also encoded in a special way to save a lot of space.
# list-max-listpack-size -2
# list-compress-depth 0

# Sets have a special encoding when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers.
# set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space.
# zset-max-listpack-entries 128
# zset-max-listpack-value 64

# HyperLogLog sparse representation bytes limit.
# hll-sparse-max-bytes 3000

# Streams macro node max size / items.
# stream-node-max-bytes 4096
# stream-node-max-entries 100

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Kiwi hash table.
# activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough for some reason.
# client-output-buffer-limit normal 0 0 0
# client-output-buffer-limit replica 256mb 64mb 60
# client-output-buffer-limit pubsub 32mb 8mb 60

# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
# hz 10

################################## KIWI SPECIFIC ###############################

# Kiwi-specific configuration options

# Log directory for Kiwi logs
# log-dir /data/kiwi_rs/logs

# Enable Redis compatibility mode
# redis-compatible-mode yes

# Number of database instances
# db-instance-num 3

# Small compaction threshold - minimum number of keys to trigger compaction
small-compaction-threshold 5000

# Small compaction duration threshold - minimum duration in milliseconds
small-compaction-duration-threshold 10000

################################## ROCKSDB CONFIG ##############################

# RocksDB configuration options for Kiwi's storage engine

# Maximum number of concurrent subcompactions
rocksdb-max-subcompactions 2

# Maximum number of concurrent background jobs (compactions and flushes)
rocksdb-max-background-jobs 4

# Maximum number of write buffers that are built up in memory
rocksdb-max-write-buffer-number 2

# Minimum number of write buffers that will be merged together before writing to storage
rocksdb-min-write-buffer-number-to-merge 2

# Amount of data to build up in memory before writing to disk
rocksdb-write-buffer-size 67108864

# Number of files to trigger level-0 compaction
rocksdb-level0-file-num-compaction-trigger 4

# Number of levels in the RocksDB LSM tree
rocksdb-number-levels 7

# Enable pipelined write for better performance
rocksdb-enable-pipelined-write no

# Slow down writes when this many level-0 files exist
rocksdb-level0-slowdown-writes-trigger 20

# Stop writes when this many level-0 files exist
rocksdb-level0-stop-writes-trigger 36

# TTL (Time To Live) for keys in seconds
rocksdb-ttl-second 604800

# Periodic compaction interval in seconds
rocksdb-periodic-second 259200

# Enable dynamic level bytes for level compaction
rocksdb-level-compaction-dynamic-level-bytes yes

# Maximum number of open files that RocksDB can have
rocksdb-max-open-files 10000

# Target file size for level-1 and above
rocksdb-target-file-size-base 67108864